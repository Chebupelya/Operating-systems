диспечтеризация:
с вытеснением: квантовый генератор (часы) генерирует сигнал что время процесса вышло
с вытеснением: система сама вносит правки какой процесс будет ща работать. 
без вытесенения: 1. закончилась 2. ожид.режим 3. сама решила отдать другому ехе процесс
у всех видов планирования есть плюсы и минусы ебать

диспетчеризауия нужна для иллюзии асинхронности
позволяет эффективно загрузить процессор, а быстродействие зависит от задач: если мы без
диспетчеризации запускаем одну большую задачу, то все пизда все зависнет, а если много
маленьких, то быстродействие повысится


циклическое: самое простое, может быть с\без выт., довольно честное,
всем процессам почти одно время; нужно правильно выбрать выделяемый квант времени для
работы процесса, т.к. для обрисовки контекста тоже нужно сколько то квантов; часто приводится
примерно 20мс каждому ресурсу (процессу) но в общем система хуйня)

приоритетное: в основном с вытеснением (можно и без при сильном желании)
есть приоритеты по которым выбирается какой процесс будет следующим
приориетты бывают статич. (это в проге по лабе) и динамич. (для того чтобы понять какой 
будет дальше) а еще оно самое популярное

кооперативное: планированием занимаются сами программы. диспечтер не решает сам факт передачи
а только выбирает процесс. sleep(0) - самая изи реализация, это говорит о том, что я хочу
отдать процесс кому то другому (уступить процессор)

гарантированное: диспечтер пытается гарантировать всем равные кванты времени, после каждого 
переключения он высчитывает коэффицент справдливости (лол блять) и по ходу дела он будет 
пересчитывать коэффицент чтобы всем было справдливо [этого нет в лабах, доп инфа]


задачи 2ух видов: периодические и неперодические [тоже нет на практике]

SMP: технология при котором каждое ядро представляется как отдельный вирт. процессор
система решает куда отправить (в какой виртуальный процессор)
по этой технологии процессы запускаются только одним процессором
больше это относится где именно несколько процессоров физических, вроде бы (бернацкий
сам не ебет) так же применимо для нескольких ядер на одном проце
жесткая привязка - обязательно только к одному ядру у процессора, то есть если будут
свободны другие процессоры, ему будет похуй и он будет ждать свой единственный процессор

эффект пинг-понга ебать: при переносе с одного ядра на другое диспечтер кидает на другое
ядро, а там диспетчер говорит то же самое и перекидывает обратно, получается диспетчеры
хуйней занимаются, но такое редко происходит так что похуй

процессы реального времени: ну надо быть осторожными с ними ебать, все что услышал


idle process: процессор не может ниче не делать, если никакие пользовательские процессы
больше не выполняются, то переходит в айдл, там нет никакой реальной полезной работы,
нагрузка на систему при этом процессе не должна быть большая. в unix можно выбрать диспетчер


афинная маска: физические и логические ядра, выводит какое то число в двоичном виде
вроде с количеством ядер, вроде длина числа в двоичке - это кол-во всех ядер,
а значение 0\1 - это то можно ли ебнуть процесс в этот процессор (1 - можно, 0 - нельзя)
обычно либо все в единицы либо иногда все в нули

дескриптор - по сути указатель, не по адресу, а по идентификатору (номеру),
отсылает к системной таблице с этими номерами, там наверное стандартные адреса, крч система 
знает где эта таблица, там несколько таблиц для процессов\потоков, то бишь по этому
указателю достается информация о процессе\потоке\итд


мультизадачная с вытеснением:
мультизадачная - одновременно несколько процессов (якоыб одновременно)
с вытеснением - диспетчер сам решает какой процесс запустить слдеюущим)

nice - Любезность - чем она ниже, тем более процесс будет любезный, типа ему похуй
сколько времени он работает, такой типа ебать да работайте вы пацаны я вам уступаю